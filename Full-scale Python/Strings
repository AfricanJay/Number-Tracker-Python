Read up Numbers.ipynb, variable assignment.ipynb

x = 1    # int
y = 2.8  # float
z = 1j   # complex

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

output:  1.0      #converts the integer to a float
output:  2       #converts the float to an integer
output:  (1 + 0j)     #converts the integer to a complex 


#note d = int(z) or float(z) will not work because a complex number cannot be convert to integer or float

d = complexy(y)
print(d)

output: (2.8+0j)  #can work because you can convert float to complex


print(type(a))
print(type(b))
print(type(c))

Ouput:
<class 'float'>
<class 'int'>
<class 'complex'>


--random numbers---

import random

print(random.randrange(32, 50))

output: 32

#run again

output: 45

#will pick any number between the range
----------------------------------------------

#Eight major data types in Python:

int (for integer)
float
str (for string)
list
tuple 
dict (for dictionary)
set
bool (for Boolean True/False)'

h

-------STRING--------------------
#text characters, can also have numbers as strings if they are enclosed in quotations. works with either signle or double

#if you are going to have a single quote in the string, encase the entire string in doubles and vice versa."

Example:
print('I'm using single quotes, but this will create an error')

#the above will throw and error, but encase in doubles and it works.

#escape character to print a new line:

print('Use \n to print a new line')  #forward slash n

[output]
use
to print a new line

#Multi-line strings:

a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""

print(a)

len('Hello World')
#shows th length of characters in the string, excluding the quotes:
OUTPUT: 11

---------------STRING INDEXING----------------------------


j = "where are you going?"

len(j)
#To display the length

print(len(j))

OUTPUT: 20

print(j[1])

OUTPUT: h

#starts counting from 0 in the front

print(j[-1])
OUTPUT: ?
#negative starts counting from the last letter as -1

print(j[1:])

OUTPUT: here are you going?
#picks everything from position 1 down to the end.

print(j[14:])

OUTPUT: going?
#picks everything from position 14

print(j[:14])  #notice the change in colon position

OUTPUT: where are you
#picks everything before position 14

print(j[:])

OUTPUT: where are you going?
#picks everything

print(j[:-3])
OUtPUT: where are you goi

#picks everything before position negative 3.

print(j[-17:])
OUTPUT:re are you going?

#picks everything from negative 17 down to the end.

print(j[::1])   #notice the double coloN

OUTPUT: where are you going?
#PRINTS in steps of 1, which is everything

print(j[::2])

OUTPUT: weeaeyugig
#prints in steps of 2, inclduing the spaces

print(j[::-1])

OUTPUT: ?gniog uoy era erehw

#STARTS from behind to print in steps of 1

print(j[::-3])

output: ?i yreh
#starts from behind to print in steps of 3

------strings splitting---------

print(j[2:7])

OUTPUT: ere a
#picks everything from positions two to five

print(j[-16:-4])

OUTPUT:e are you go
#picks everything from positions -16 to -4



-------------------concatenation----------------------------

j = "Jennifer"

age = 24

print(j + "is" + age)

OUTPUT: syntax error. can only concatenate strings.

#fix by converting the interger to a string

print(j + " is " + str(age))

Output: Jennifer is 24

print(j + " has always been " + str(age) + " and also a very good woman.")

Output: Jennifer has always been 24 and also a very good woman.

age = 'f'

print(age*20)

output: ffffffffffffffffffff

---------------------------------------USING IF STATEMENT WITH STRINGS--------------------------------



content = "The best things in life are free!"
if "wow" in content:
  print("Yes, 'wow' is present.")
else:
   print('sorry')

#this can be used for simple password checks if you use an input collector

output: sorry

if "best" in content:
  print("Yes, 'best' is present.")
else:
   print('sorry')

output: "Yes, 'best' is present.

#Note: indentation levels matters when using if-else.


------------------STRING METHODS-----------------------------------


#capitalize()	Converts the first character to upper case

final_text = "best in python is a girl"

print(final_text.capitalize())

output: Best in python is a girl

---------

#casefold()	Converts string into lower case, every capital letter is put back to small

final_text = "best in Python is A girl"

print(final_text.casefold())

output: best in python is a girl

---------

#center()	Returns a centered string, pushes the string by the number of spaces specified

final_text = "best in Python is A girl"

print(final_text.center(50))

output:            best in Python is A girl 

------------

count()	Returns the number of times a specified value occurs in a string

final_text = "best in Python is A girl"

print(final_text.count("i"))

output: 3

------------

#encode()	Returns an encoded version of the string

final_text = "best in Python is A girl"

print(final_text.encode())

output: b'best in Python is Ae girl'  #research more on this

------------------


#endswith()	Returns true if the string ends with the specified value

final_text = "best in Python is A girl"

print(final_text.endswith("l"))

output: True

final_text = "best in Python is A girl"

print(final_text.endswith("r"))

output: false

-----------

#expandtabs()	Sets the tab size of the string, \t is the escape character for tabs in the text, and by default, it creates a full, wide-sapce tab. 

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs())

output: best    in      Python  is      A       girl

#but specifying a number can reduce it

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs(2))

output: best  in  Python  is  A girl

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs(0))
output: bestinPythonisAgirl

---------

#find()	Searches the string for a specified value and returns the position of where it was found, or where it starts from

final_text = "best in Python is A girl"

print(final_text.find('girl'))

output: 20

-----------

#format()	Formats specified values in a string

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100))

output: best in Python is A girl scoring 100

#you do not need to convert the integer to a string here.
#to make it a floating point to a number of decimal places

final_text = "best in Python is A girl scoring {score:.4f}"

print(final_text.format(score=100))
output: best in Python is A girl scoring 100.0000

#if you do it this way

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100.0000))

output: best in Python is A girl scoring 100.0  

#system will reduce the zeros to one, 
#but it works fine for other signifcant places

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100.3423))

output: best in Python is A girl scoring 100.3423

#the following will all produce the same output

    final_text = "best in Python is A girl scoring {score} and she is {quality}"
    
    print(final_text.format(score=103, quality='beautiful'))
    
    further_text = "best in python is a girl scoring {0} and she is {1}".format(103, 'beautiful')
    
    print(further_text)
    
    other_text = "best in Python is a girl scoring {} and she is {}"
    
    print(other_text.format(103, 'beautiful'))

output: 

best in Python is A girl scoring 103 and she is beautiful  #the first one used name vairable
best in python is a girl scoring 103 and she is beautiful   #second use numbered indexes
best in Python is a girl scoring 103 and she is beautiful    #third used blank spaces

--------------for other formatting. a colon always comes before the format

:, #to add a comma to separate thousand values

final_text = "best in Python is A girl scoring {score:,}"

print(final_text.format(score=14000000))

OR:

final_text = "best in Python is A girl scoring {:,}"

print(final_text.format(14000000))

#the above works since it is only one value

OUTPUT: best in Python is A girl scoring 14,000,000

:_ #to use an underscore as a thousand separator

final_text = "best in Python is A girl scoring {:_}"

print(final_text.format(14000000))

:b #to get the binary format of a number

Check this page: https://www.w3schools.com/python/ref_string_format.asp for the rest of the format


-------------------------INDEX METHOD---------------------------

#The index() method is almost the same as the find() method, 
the only difference is that the find() method returns -1 if the value is not found

final_text = "best in Python is A girl scoring".index('Python')

print(final_text)

Output: 8

#you can als limit the search range of the index

final_text = "best in Python is A girl scoring".index('Python', 2, 10)

print(final_text)

Output: This will throw back an error because 'python' exceeds substring 10

Try:

final_text = "best in Python is A girl scoring".index('Python', 2, 20)

print(final_text)

Output: this works because python is within the selected.

-----------string checkers--------------

isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case

----------------------------------------------------------------

[...continue filling string methods here]
