Read up Numbers.ipynb, variable assignment.ipynb

x = 1    # int
y = 2.8  # float
z = 1j   # complex

#convert from int to float:
a = float(x)

#convert from float to int:
b = int(y)

#convert from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

output:  1.0      #converts the integer to a float
output:  2       #converts the float to an integer
output:  (1 + 0j)     #converts the integer to a complex 


#note d = int(z) or float(z) will not work because a complex number cannot be convert to integer or float

d = complexy(y)
print(d)

output: (2.8+0j)  #can work because you can convert float to complex


print(type(a))
print(type(b))
print(type(c))

Ouput:
<class 'float'>
<class 'int'>
<class 'complex'>


--random numbers---

import random

print(random.randrange(32, 50))

output: 32

#run again

output: 45

#will pick any number between the range
----------------------------------------------

#Eight major data types in Python:

int (for integer)
float
str (for string)
list
tuple 
dict (for dictionary)
set
bool (for Boolean True/False)'

h

-------STRING--------------------
#text characters, can also have numbers as strings if they are enclosed in quotations. works with either signle or double

#if you are going to have a single quote in the string, encase the entire string in doubles and vice versa."

Example:
print('I'm using single quotes, but this will create an error')

#the above will throw and error, but encase in doubles and it works.

#escape character to print a new line:

print('Use \n to print a new line')  #forward slash n

[output]
use
to print a new line

#Multi-line strings:

a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""

print(a)

len('Hello World')
#shows th length of characters in the string, excluding the quotes:
OUTPUT: 11

---------------STRING INDEXING----------------------------


j = "where are you going?"

len(j)
#To display the length

print(len(j))

OUTPUT: 20

print(j[1])

OUTPUT: h

#starts counting from 0 in the front

print(j[-1])
OUTPUT: ?
#negative starts counting from the last letter as -1

print(j[1:])

OUTPUT: here are you going?
#picks everything from position 1 down to the end.

print(j[14:])

OUTPUT: going?
#picks everything from position 14

print(j[:14])  #notice the change in colon position

OUTPUT: where are you
#picks everything before position 14

print(j[:])

OUTPUT: where are you going?
#picks everything

print(j[:-3])
OUtPUT: where are you goi

#picks everything before position negative 3.

print(j[-17:])
OUTPUT:re are you going?

#picks everything from negative 17 down to the end.

print(j[::1])   #notice the double coloN

OUTPUT: where are you going?
#PRINTS in steps of 1, which is everything

print(j[::2])

OUTPUT: weeaeyugig
#prints in steps of 2, inclduing the spaces

print(j[::-1])

OUTPUT: ?gniog uoy era erehw

#STARTS from behind to print in steps of 1

print(j[::-3])

output: ?i yreh
#starts from behind to print in steps of 3

------strings splitting---------

print(j[2:7])

OUTPUT: ere a
#picks everything from positions two to five

print(j[-16:-4])

OUTPUT:e are you go
#picks everything from positions -16 to -4



-------------------concatenation----------------------------

j = "Jennifer"

age = 24

print(j + "is" + age)

OUTPUT: syntax error. can only concatenate strings.

#fix by converting the interger to a string

print(j + " is " + str(age))

Output: Jennifer is 24

print(j + " has always been " + str(age) + " and also a very good woman.")

Output: Jennifer has always been 24 and also a very good woman.

age = 'f'

print(age*20)

output: ffffffffffffffffffff

---------------------------------------USING IF STATEMENT WITH STRINGS--------------------------------



content = "The best things in life are free!"
if "wow" in content:
  print("Yes, 'wow' is present.")
else:
   print('sorry')

#this can be used for simple password checks if you use an input collector

output: sorry

if "best" in content:
  print("Yes, 'best' is present.")
else:
   print('sorry')

output: "Yes, 'best' is present.

#Note: indentation levels matters when using if-else.


------------------STRING METHODS-----------------------------------


#capitalize()	Converts the first character to upper case

final_text = "best in python is a girl"

print(final_text.capitalize())

output: Best in python is a girl

---------

#casefold()	Converts string into lower case, every capital letter is put back to small

final_text = "best in Python is A girl"

print(final_text.casefold())

output: best in python is a girl

---------

#center()	Returns a centered string, pushes the string by the number of spaces specified

final_text = "best in Python is A girl"

print(final_text.center(50))

output:            best in Python is A girl 

------------

count()	Returns the number of times a specified value occurs in a string

final_text = "best in Python is A girl"

print(final_text.count("i"))

output: 3

------------

#encode()	Returns an encoded version of the string

final_text = "best in Python is A girl"

print(final_text.encode())

output: b'best in Python is Ae girl'  #research more on this

------------------


#endswith()	Returns true if the string ends with the specified value

final_text = "best in Python is A girl"

print(final_text.endswith("l"))

output: True

final_text = "best in Python is A girl"

print(final_text.endswith("r"))

output: false

-----------

#expandtabs()	Sets the tab size of the string, \t is the escape character for tabs in the text, and by default, it creates a full, wide-sapce tab. 

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs())

output: best    in      Python  is      A       girl

#but specifying a number can reduce it

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs(2))

output: best  in  Python  is  A girl

final_text = "best\tin\tPython\tis\tA\tgirl"

print(final_text.expandtabs(0))
output: bestinPythonisAgirl

---------

#find()	Searches the string for a specified value and returns the position of where it was found, or where it starts from

final_text = "best in Python is A girl"

print(final_text.find('girl'))

output: 20

-----------

#format()	Formats specified values in a string

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100))

output: best in Python is A girl scoring 100

#you do not need to convert the integer to a string here.
#to make it a floating point to a number of decimal places

final_text = "best in Python is A girl scoring {score:.4f}"

print(final_text.format(score=100))
output: best in Python is A girl scoring 100.0000

#if you do it this way

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100.0000))

output: best in Python is A girl scoring 100.0  

#system will reduce the zeros to one, 
#but it works fine for other signifcant places

final_text = "best in Python is A girl scoring {score}"

print(final_text.format(score=100.3423))

output: best in Python is A girl scoring 100.3423

#the following will all produce the same output

    final_text = "best in Python is A girl scoring {score} and she is {quality}"
    
    print(final_text.format(score=103, quality='beautiful'))
    
    further_text = "best in python is a girl scoring {0} and she is {1}".format(103, 'beautiful')
    
    print(further_text)
    
    other_text = "best in Python is a girl scoring {} and she is {}"
    
    print(other_text.format(103, 'beautiful'))

output: 

best in Python is A girl scoring 103 and she is beautiful  #the first one used name vairable
best in python is a girl scoring 103 and she is beautiful   #second use numbered indexes
best in Python is a girl scoring 103 and she is beautiful    #third used blank spaces

--------------for other formatting. a colon always comes before the format

:, #to add a comma to separate thousand values

final_text = "best in Python is A girl scoring {score:,}"

print(final_text.format(score=14000000))

OR:

final_text = "best in Python is A girl scoring {:,}"

print(final_text.format(14000000))

#the above works since it is only one value

OUTPUT: best in Python is A girl scoring 14,000,000

:_ #to use an underscore as a thousand separator

final_text = "best in Python is A girl scoring {:_}"

print(final_text.format(14000000))

:b #to get the binary format of a number

Check this page: https://www.w3schools.com/python/ref_string_format.asp for the rest of the format


-----------------

#The index() method is almost the same as the find() method, 
the only difference is that the find() method returns -1 if the value is not found

final_text = "best in Python is A girl scoring".index('Python')

print(final_text)

Output: 8

#you can als limit the search range of the index

final_text = "best in Python is A girl scoring".index('Python', 2, 10)

print(final_text)

Output: This will throw back an error because 'python' exceeds substring 10

Try:

final_text = "best in Python is A girl scoring".index('Python', 2, 20)

print(final_text)

Output: this works because python is within the selected.

-----------string checkers--------------

isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case

----------------------------------------------------------------

[...continue filling string methods here]

----------

#join will join all the members of a string data type together, using a specified separator

final_tuple = ("Aisha", "Farida", "Nono")

x = "#".join(final_tuple)

print(x)

Output: Aisha#Farida#Nono

OR:

final_tuple = ("Aisha", "Farida", "Nono")

mySeparate = " "  #whitespace

x = myseparate.join(final_tuple)

print(x)

output:

Aisha Farida Nono

OR:

final_dict = {"name": "John", "country": "Norway"}
mySeparator = "00"

x = mySeparator.join(final_dict)

print(x)

output:

name00country   #does not join the values

-----------------

#ljust returns a left justiied version of the string, autmatically padded with white spaces depending on the specified
#number, or padded with any string character specified.

final_text = ("name")

print(final_text.ljust(20), "jennifer")

#remember, there are many ways to write this, like creating a separate variable in btw to do the ljust

output: name                 jennifer      #it pads name with 1 white spaces to make 20


final_text = ("name")

print(final_text.ljust(20, 'x'), "jennifer")


output: namexxxxxxxxxxxxxxxx jennifer

-----------------------

#lower returns the lowercase version of the string


txt = "Hello my FRIENDS"

print(txt.lower())

output: hello my friends

-----------------

final_text = ("          miss            ")

c = final_text.lstrip()

print("her name is ", c, " jennifer")

output: her name is  miss              jennifer   #only strips to the left


OR:

final_text = ("          miss            ")

print("her name is ", final_text.lstrip(), " jennifer")

#if the leading characters aren't white spaces:

final_text = ("######44444aaaa......miss    ")

print("her name is ", final_text.lstrip("#4a."), " jennifer")


----------------

#maketrans() returns a translation table used as a sort of find a replace and remove

final_text = "Hello Jenny"

x = "Jen"
y = "Gim"

translator = str.maketrans(x, y)
print(final_text.translate(translator))

OUTPUT: Hillo Gimmy

final_text = "Hello Jenny"

x = "Jen"
y = "Gim"
z="oy"
translator = str.maketrans(x, y, z)
print(final_text.translate(translator))

Output: Hill Gimm  #the work of z is to remove characters from the string

-----------------------

#partition() takes in a string and returns a tuple divided into three

final_text = "Hello Jenny how have you been since?"

print(final_text.partition("have you"))

Output: ('Hello Jenny how ', 'have you', ' been since?')

#returns empty tuple spaces if the dividing characters are not found


final_text = "Hello Jenny how have you been since?"

print(final_text.partition("always"))

Output: ('Hello Jenny how have you been since?', '', '') #always is not there, so it splits with empty results

------------------------------

#replace() takes a value and replaces it with another one. Default is to replace all instances of the old value. but you
can specify how many times you want it, from the top

final_text = "Jenny Jenny, how are you?"


print(final_text.replace("Jenny", "Sam"))

Output: Sam Sam, how are you?

Or..

final_text = "Jenny Jenny, how are you?"


print(final_text.replace("Jenny", "Sam", 1))

Output: Sam Jenny, how are you?

-------------------
rfind() is different from find becasue instead of starting from the front to pick the index, it starts from the back. Or
simply put, the index of the last position where the substring was found

final_text = "Jenny Jenny, how are you?"

v = final_text.rfind("Jenny")


print(v)

Output: 6. Find would have been 0.

#you can search within a range

final_text = "Jenny Jenny, how are you?"

v = final_text.find("n", 7, 12)


print(v)

output: 8

------------------

rjust() returns a right justified version of the string. That means it pads with spaces to the right

final_text = "Jenny, you?"
v = final_text.rjust(20)

print(v, "man")

output:         Jenny, you? man

or

#you can define a string or character to pad with

final_text = "Jenny, you?"
v = final_text.rjust(20, "x")

print(v, "man")

output:xxxxxxxxxJenny, you? man

----------PROPER STRING FORMATTING-------------------------

#using % placeholders. you can simply write %s to inject a string

print("i really want to check the value of %s later" %'the score')   #notice no comma btw the string and % sign

output: i really want to check the value of the score later

#you can inject multiple values

print("i really want to check the value of %s later, because I want to know %s is supposed to be sent from %s to %s" %('the score','how much','treasury', 'accounts'))

output: i really want to check the value of the score later, because I want to know how much is supposed to be sent from treasury to accounts

#you can pass variable names

w,x,y,z = 'the score','how much','treasury', 'accounts'

print("i really want to check the value of %s later, because I want to know %s is supposed to be sent from %s to %s" %(w,x,y,z))

output: i really want to check the value of the score later, because I want to know how much is supposed to be sent from treasury to accounts


#r% injects everything into a string, including the quotation marks and esc characters

print('jay is really %s' %'pretty')
print('jay is really %r' %'pretty')

output:
jay is really pretty
jay is really 'pretty'

print('jay is really %s' %'super \tpretty')
print('jay is really %r' %'super \tpretty')

output:
jay is really super 	pretty
jay is really 'super \tpretty'

#you can covert any numbers into instant string using %s, without using the str() method or encasing in quotes. Also, %d rounds to integers with no decimals

print('I have only %s chance of getting it' %100.0120)
print('I have only %d chance of getting it' %100.0120)

output:
I have only 100.012 chance of getting it
I have only 100 chance of getting it

precision of floating points:

print('Floating point numbers: %5.2f' %(13.144))
output: Floating point numbers: 13.14 

print('Floating point numbers: %1.0f' %(13.144))
output: Floating point numbers: 13

print('Floating point numbers: %1.5f' %(13.144))
output: Floating point numbers: 13.14400

print('Floating point numbers: %10.2f' %(13.144))  #pre-padding to mke up to 10 characters which is what the 10 means

output: Floating point numbers:      13.14
print('Floating point numbers: %25.2f' %(13.144))
Floating point numbers:                     13.14


#multiple insertions of random type

print("i want to use this %s to count %7.3f of %r coming at %dpm" %('medium', 5.1234, 'people', 4.12))

output: i want to use this medium to count   5.123 of 'people' coming at 4pm
#notice the padding to make up to 7 characters for the 2nd one

#remember the .format method and the three different ways it can be used? always better than the %s,f,r,d styles

print('i must power {}'.format('through'))
print('i must power {}, {}'.format('through', 'this'))
print('i must embrace the {3}, {2}, {1}, {0}'.format('tedium', 'and', 'extreme', 'boredom'))
print('i must embrace the {a}, {b}, {c}, {d}'.format(a='tedium', b=2, c='extreme', d='boredom'))  #notice how the number didn't require quotations

output:
i must power through
i must power through, this
i must embrace the boredom, extreme, and, tedium
i must embrace the tedium, 2, extreme, boredom

3. Inserted objects can be reused, avoiding duplication:
print('A %s saved is a %s earned.' %('penny','penny'))
# vs.
print('A {p} saved is a {p} earned.'.format(p='penny'))
A penny saved is a penny earned.
A penny saved is a penny earned.


#how to align and use padding in tuples with .format



Within the curly braces you can assign field lengths, left/right alignments, rounding parameters and more

print('{0:8} | {1:9}'.format('Fruit', 'Quantity'))
print('{0:8} | {1:9}'.format('Apples', 3.))
print('{0:8} | {1:9}'.format('Oranges', 10))

output::
Fruit    | Quantity 
Apples   |       3.0
Oranges  |        10

#note: 0,1 preceding the colons are the indexes of the content of the tuple, not index spaces themselvies. Doing {2:8} will fling an error because there is no 3rd item.

By default, .format() aligns text to the left, numbers to the right. You can pass an optional <,^, or > to set a left, center or right alignment:

print('{0:<8} | {1:^8} | {2:>8}'.format('Left','Center','Right'))
print('{0:<8} | {1:^8} | {2:>8}'.format(11,22,33))
Left     |  Center  |    Right
11       |    22    |       33
You can precede the aligment operator with a padding character

print('{0:=<8} | {1:-^8} | {2:.>8}'.format('Left','Center','Right'))
print('{0:=<8} | {1:-^8} | {2:.>8}'.format(11,22,33))
Left==== | -Center- | ...Right
11====== | ---22--- | ......33


#check this out

print('This is my fourteen-character, five-decimal number:%14.5f' %13.5793848)
print('This is my fourteen-character, five-decimal number:{0:14.5f}'.format(13.5793848))

they produce same output:

output: This is my fourteen-character, five-decimal number:      13.57938
        This is my fourteen-character, five-decimal number:      13.57938

#using f-string instead of format

gender = "two spirit"

print (f'she said her gender is {gender}')

output: she said her gender is two spirit

print(f'she said her gender is {gender!r}')

output: she said her gender is "two spirit"  #use !r to pull the full string representation


value = 12.456

print("This is my fourteen-character, five-decimal number:{0:14.5f}".format(value))   #using format method
print(f'This is my fourteen-character, five-decimal number:{value:14.5f}')    #using f-string


output:

This is my fourteen-character, five-decimal number:      12.45600
This is my fourteen-character, five-decimal number:      12.45600

------------------------OPERATORS IN PYTHON----------------------------------

x = 5
y = 3
print(x + y)

or print (3+5) 

output: 8

#same goes for
-	Subtraction	x - y	
*	Multiplication	x * y	
/	Division	x / y

x = 5
y = 2
print(x % y)

#prints the remainder after division

output: 1

x = 2
y = 5
print(x ** y) #same as 2*2*2*2*2

output: 32

x = 15
y = 2
print(x // y)
#the floor division // rounds the result down to the nearest whole number

output: 7.5

Assignment operators:

=	  x = 5	  x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3

x = 12
x /=2
print(x)

output: 6.0

%=	x %= 3	x = x % 3

x = 13
x %=2
print(x)

output: 1

//=	 x //= 3	  x = x // 3

x = 13
x //=2
print(x)

output: 6

**=	x **= 3	x = x ** 3  #understood

&=	x &= 3	x = x & 3  #AND bitwise operation

x = 13
x &= 2
print(x)

output: 0

#how? convert 13 and 2 to binary and perform a bitwise AND comparison. If 1 and 0, o. if 0 and 0, 0. If 1 and 1, 1. Final answer... 0000


x = 13
x |= 2
print(x)

output: 15

#same principle as above but OR bitwise comparison

x = 13
x ^= 2
print(x)

output: 15

#this is the XOR operator. Only one of the inputs will be 1 for the value to be 1. 1 xor 1 is 0. 0 xor 0 is 0. 1 xor o is 1. 0 xor 1 is 1.

x = 4
x <<= 2
print(x)

output: 16

#this is the "add zero bits leftwise" operator. 4 is 100 in binary. add 2 bits leftwise from the back, you get 10000.That's 16 in decimal.

x = 4
x >>= 2
print(x)

output: 1

# this is the "add zero bits rightwise" operator. it gives 1.

:=	
print(x := 3)

#this simply means x = 3

output: 3
print(x)

#Python Comparison Operators. These return true of false.

==	  Equal         	x == y	
!=	  Not equal      	x != y	
>	    Greater than   	x > y	
<	    Less than      	x < y	
>=	  Greater than or equal to	   x >= y	
<=	  Less than or equal to     	x <= y

x = 5
y = 3
print(x >= y)
# returns True because five is greater, or equal, to 3.

~	NOT	Inverts all the bits	~x


#very useful

and     	Returns True if both statements are true                                  	x < 5 and  x < 10	
or	      Returns True if one of the statements is true                              	x < 5 or x < 4	
not      	Reverse the result, returns False if the result is true                    	not(x < 5 and x < 10)


#python identity operators

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)

# returns True because z is the same object as x

print(x is y)

# returns False because x is not the same object as y, even if they have the same content

print(x == y)

# to demonstrate the difference betweeen "is" and "==": this comparison returns True because x is equal to y

#now try 'is not' 
x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is not z)

# returns False because z is the same object as x

print(x is not y)

# returns True because x is not the same object as y, even if they have the same content

print(x != y)
# to demonstrate the difference betweeen "is not" and "!=": this comparison returns False because x is equal to y


#python membership operators

x = ["apple", "banana"]

print("banana" in x)

# returns True because a sequence with the value "banana" is in the list


x = ["apple", "banana"]
print("pineapple" not in x)
# returns True because a sequence with the value "pineapple" is not in the list


operator precedence:

()                           	Parentheses	
**                          	Exponentiation	
+x  -x  ~x	                  Unary plus, unary minus, and bitwise NOT	
*  /  //  %	            Multiplication, division, floor division, and modulus	
+  -	                        Addition and subtraction	
<<  >>                 	Bitwise left and right shifts	
&	Bitwise AND	
^	Bitwise XOR	
|	Bitwise OR	
==  !=  >  >=  <  <=  is  is not  in  not in 	Comparisons, identity, and membership operators	
not	Logical NOT
and	AND	
or	OR


print(6 ^ 2 + 1)

output: 5  #addition takes precedence before the xor operator

print(8 >> 4 - 2) 
output: 2


-----PYTHON CASTING--------------
changing the datatype by using the constructors float(), str(), int()

x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0'
x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3


x =4 
y=2
x = str(4)
print (x+y)

output: error  #cannot add a string and integer


-------------PYTHON BOOLEAN------------------------


Most bool values wil return true

bool("abc")
bool(123)
bool(["apple", "cherry", "banana"])

some will return false

bool(False)
bool(None)
bool(0)
bool("")
bool(())
bool([])
bool({})

def myFunction() :
  return True

print(myFunction())

output: True

#using the isinstacne() fxn to check the datatype of a variable

x = 200
print(isinstance(x, int))

output: True

